<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 345345345 Blog</title>
    <link>http://oubnpdea.github.io/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 345345345 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>345345345345@163.com (345345 345345345)</managingEditor>
    <webMaster>345345345345@163.com (345345 345345345)</webMaster>
    <lastBuildDate>Tue, 15 Dec 2015 18:17:24 +0800</lastBuildDate>
    <atom:link href="http://oubnpdea.github.io/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>让 Vim 成为 Go 的编辑器</title>
      <link>http://oubnpdea.github.io/2015/12/vim-go/</link>
      <pubDate>Tue, 15 Dec 2015 18:17:24 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/vim-go/</guid>
      <description>

&lt;p&gt;最近工作上接手了一个 Go 相关的项目，所以需要做一些关于工作环境上的准备，因为一直是 Vim 的忠实粉，这时候就想着能找到一个 Vim 的插件让 Vim 支持 Go。这时候就找到了 &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt;，使用了一天感觉还不错。&lt;/p&gt;

&lt;p&gt;vim-go 提供以下功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保存后自动格式化&lt;/li&gt;
&lt;li&gt;代码自动补全&lt;/li&gt;
&lt;li&gt;代码高亮&lt;/li&gt;
&lt;li&gt;支持 Go 工具链的命令&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装-vim-go:d6ac5b2eecfc12afd25350cc0802f0f4&#34;&gt;安装 vim-go&lt;/h2&gt;

&lt;p&gt;安装方式使用 Vundle 安装，只需要修改 .vimrc 文件，添加如下配置即可（详细 Vundle 可查看 &lt;a href=&#34;http://blog.bpcoder.com/2015/12/vim-vundle/&#34;&gt;Vim 的插件管理工具 Vundle&lt;/a&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Plugin &#39;fatih/vim-go&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后，需要确认已安装了必须的二进制文件（包括 gocode，godef，goimports等等）。你可以在 Vim 内执行如下命令简易安装。（前提你已经安装好了 Go 的环境变量）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoInstallBinaries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果后面有更新二进制文件需求，仅需执行下面命令即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoUpdateBinaries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果查看在 vim 中可执行的命令仅需执行下面命令查看即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:help vim-go
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;配置-vim-go:d6ac5b2eecfc12afd25350cc0802f0f4&#34;&gt;配置 vim-go&lt;/h2&gt;

&lt;p&gt;配置部分可通过查看官方文档，设置属于自己的喜好配置，具体的文档文件在 ~/.vim/bundle/vim-go/doc/vim-go.txt 文件中。&lt;/p&gt;

&lt;p&gt;今天这篇写的有点简单，算是自己的学习笔记，希望对于其他人也能有所帮助。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tmux 配置管理工具 Tmuxinator</title>
      <link>http://oubnpdea.github.io/2015/12/tmux-advanced/</link>
      <pubDate>Mon, 14 Dec 2015 16:07:54 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/tmux-advanced/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/tmuxinator/tmuxinator&#34;&gt;Tmuxinator&lt;/a&gt; 是一个简单的管理不同的 tmux 配置的命令行工具。使用简单的 YAML 格式来定义窗口布局和命令，然后就可以使用 tmuxinator 命令登录了。和其他方法不同，tmuxinator 为配置文件提供了一个集中的位置和一个更简单的办法来创建复杂的布局。它还允许在每个窗口创建之前运行特定的命令。&lt;/p&gt;

&lt;p&gt;Tmuxinator 由 Ruby 开发完成，所以运行需要系统中拥有 Ruby 解释器，不过 OS X 上 Ruby 是默认安装的。不过由于不可说的原因，导致使用 gem 安装任何东西时都会安装不成功，故建议使用淘宝提供的 RubyGems 镜像。修改镜像的方式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装-tmuxinator:302e394fc82200d871119ae6c4f327a6&#34;&gt;安装 Tmuxinator&lt;/h2&gt;

&lt;p&gt;安装方式很简单，前提是已经安装了 Ruby 解释器及修改了镜像源。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install tmuxinator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并在 .zshrc 文件中配置 $EDITOR 环境变量，即设置 Vim 为默认编辑器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export EDITOR=vim
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用-tmuxinator:302e394fc82200d871119ae6c4f327a6&#34;&gt;使用 Tmuxinator&lt;/h2&gt;

&lt;p&gt;常规查看 tmuxinator 命令的使用方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmuxinator --help
tmuxinator commands:
tmuxinator commands                 # Lists commands available in tmuxinator
tmuxinator completions [arg1 arg2]  # Used for shell completion
tmuxinator copy [EXISTING] [NEW]    #  Copy an existing project to a new project and open it in your editor
tmuxinator debug [PROJECT] [ARGS]   # Output the shell commands that are generated by tmuxinator
tmuxinator delete [PROJECT]         # Deletes given project
tmuxinator doctor                   # Look for problems in your configuration
tmuxinator help [COMMAND]           # Describe available commands or one specific command
tmuxinator implode                  # Deletes all tmuxinator projects
tmuxinator list                     # Lists all tmuxinator projects
tmuxinator local                    # Start a tmux session using ./.tmuxinator.yml
tmuxinator new [PROJECT]            # Create a new project file and open it in your editor
tmuxinator start [PROJECT] [ARGS]   #  Start a tmux session using a project&#39;s tmuxinator config, with an optional [ALIAS] for project reuse
tmuxinator version                  # Display installed tmuxinator version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建新配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmuxinator new [project-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后通过个人使用习惯编辑即可，贴出个人的一个配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ~/.tmuxinator/blog.yml

name: blog
root: ~/git/hugo-blog

windows:
  - editor:
    layout: 68d2,238x55,0,0[238x44,0,0{184x44,0,0,0,53x44,185,0,2},238x10,0,45,1]
    panes:
      - cd content/post &amp;amp;&amp;amp; clear
      - clear
      - hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/tmux-advanced.jpg&#34; alt=&#34;效果图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样就可以根据个人喜好配置很多适合自己的开发环境了。使用 Tmuxinator 相对于直接使用 Tmux 对于配置管理更加方便，也可以配置很多适合自己的环境配置。&lt;/p&gt;

&lt;p&gt;配置简单分析：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name        会话名称
root        根目录
windows     窗口
layout      窗格布局样式
panes       下面填写各个窗格
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置文件缩进为2个空格&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;layout 的结果，可执行调节窗格，输入 tmux list-windows 获取样式码填入&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用具体配置的命令为     tmuxinator [配置名称]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置文件具体的存储位置为主目录的 .tmuxinator 目录下&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考资料:302e394fc82200d871119ae6c4f327a6&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aquaregia.gitbooks.io/tmux-productive-mouse-free-development_zh/content/index.html&#34;&gt;《tmux: Productive Mouse-Free Development》中文翻译版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tmux 提高效率的利器</title>
      <link>http://oubnpdea.github.io/2015/12/acquaintance-tmux/</link>
      <pubDate>Sun, 13 Dec 2015 21:00:08 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/acquaintance-tmux/</guid>
      <description>

&lt;p&gt;Tmux 是一个终端复用器（terminal multiplexer）。它让我们可以使用单一环境就可以登录多个终端或窗口，每个终端或窗口都运行着独立的进程或程序。例如，我们可以打开 tmux 然后运行 Vim 编辑器。然后可以新建一个窗口运行一个数据库控制台，然后在这些程序之间来回切换，这一切都是在一个会话（session）中进行的。&lt;/p&gt;

&lt;p&gt;有了 Tmux 某种程度上减少了对于鼠标的操作，转而集中在键盘上的操作，就大大提高我们的工作效率。这简直对于 Vim 和 终端使用的重度用户来说，简直爱不释手。&lt;/p&gt;

&lt;h2 id=&#34;安装-tmux:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;安装 Tmux&lt;/h2&gt;

&lt;p&gt;在安装方式上强烈推荐使用包管理器安装方式，当然如果你对于最新版本有着强烈的需求，可以选择源码编译构建安装方式。&lt;/p&gt;

&lt;p&gt;在 OS X 上的安装方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tmux-的会话-窗口-窗格:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;Tmux 的会话、窗口、窗格&lt;/h2&gt;

&lt;p&gt;Tmux 的会话比较类似于 Screen 的会话，可以在分离出（detaching）当前会话后，原会话仍然后台运行。&lt;/p&gt;

&lt;h5 id=&#34;快捷键前缀:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;快捷键前缀&lt;/h5&gt;

&lt;p&gt;首先说明一下快捷键前缀问题，这个和 Screen 很相似，就是每一个快捷键的使用，都需要先执行快捷键前缀，然后在执行对应的快捷键才行。Tmux 的默认快捷键前缀为 C-b （即 Ctrl-b），后面会大量使用，后续简写为 PREFIX。&lt;/p&gt;

&lt;h4 id=&#34;1-会话:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;1. 会话&lt;/h4&gt;

&lt;p&gt;创建会话命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux new -s [session-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看所有会话列表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分离会话使用快捷键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新连接会话&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmux attach -t [session-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关闭会话有两种方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在会话中使用 exit 命令进行关闭会话操作。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;命令行执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux kill-session -t [session-name]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;2-窗口:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;2. 窗口&lt;/h4&gt;

&lt;p&gt;创建窗口有两种方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在创建会话时一并创建：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux new -s [session-name] -n [window-name]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在会话中创建使用快捷键&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + c
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;窗口切换有两种方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;相邻间窗口切换快捷键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + n      下一个窗口
PREFIX + p      上一个窗口
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用窗口数字下标快捷键切换：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + [数字下标]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关闭窗口有两种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在窗口中使用 exit 命令进行关闭窗口的操作。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用快捷键关闭当前窗口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;3-窗格:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;3. 窗格&lt;/h4&gt;

&lt;p&gt;创建窗格可以使用快捷键方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + %      左右一分为二方式分格
PREFIX + &amp;quot;      上下一分为二方式分格
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;窗格之间切换也有两种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;窗格间循环方式切换的快捷键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + o
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;指定方向方式切换的快捷键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + [UP/DOWN/LEFT/RIGHT]       使用上下左右键
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关闭窗格有两种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在窗格中使用 exit 命令进行关闭窗格的操作。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用快捷键关闭当前窗格&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PREFIX + X      （注：大写的X）
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;自定义配置:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;自定义配置&lt;/h2&gt;

&lt;p&gt;tmux 的配置文件存放在 /etc/tmux.conf 和 当前主目录下的 .tmux.conf 中，不过 .tmux.conf 的优先级更高。为了更方便的使用，建议修改 .tux.conf，防止修改全局配置文件影响到其他业务。&lt;/p&gt;

&lt;p&gt;先贴出我个人的配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 解绑原前缀快捷键
unbind C-b
# 设置新前缀快捷键
set -g prefix C-a

# 修改延时为 1ms
set -sg escape-time 1

# 修改窗口默认起始数字为1
set -g base-index 1
# 修改窗格默认起始数字为1
setw -g pane-base-index 1

# 设置重新加载配置文件的快捷键
bind r source-file ~/.tmux.conf \; display &amp;quot;Reloaded!&amp;quot;

# 设置允许 C-a 发送到 tmux 内部程序
bind C-a send-prefix

# 修改创建窗格快捷键
bind | split-window -h
bind - split-window -v

# 修改原上下左右键为vim方式
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# 修改切换窗口快捷键
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# 调整窗格快捷键设置
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

set -g mouse on

set -g default-terminal &amp;quot;screen-256color&amp;quot;

set -g status-fg white
set -g status-bg colour240

setw -g window-status-fg cyan
setw -g window-status-bg colour240
setw -g window-status-attr dim

setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright

set -g pane-border-fg green
set -g pane-border-bg black
set -g pane-active-border-fg white
set -g pane-active-border-bg colour21

set -g message-fg white
set -g message-bg black
set -g message-attr bright

set -g status-justify centre
set -g status-left &amp;quot;[#S]&amp;quot;
set -g status-right &amp;quot;%b-%d %R&amp;quot;
set -g status-utf8 on

set -g status-interval 60

setw -g monitor-activity on
set -g visual-activity on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置主要涉及对于快捷键自定义的设置，因为原生的快捷键的确有些难记，可以根据个人喜好设置；还有一些关于显示样式的设置，如果对于具体配置不是很了解建议详细阅读 &lt;a href=&#34;https://aquaregia.gitbooks.io/tmux-productive-mouse-free-development_zh/content/index.html&#34;&gt;《tmux: Productive Mouse-Free Development》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;补充内容:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;补充内容&lt;/h2&gt;

&lt;p&gt;&lt;font style=&#34;font-weight: 700;text-decoration: none;color: #e74c3c;&#34;&gt;（2015-12-14 更新）&lt;/font&gt; 添加效果图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/acquaintance-tmux.jpg&#34; alt=&#34;效果图&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料:e9df9cc9c4e959182bebbff738539f1e&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aquaregia.gitbooks.io/tmux-productive-mouse-free-development_zh/content/index.html&#34;&gt;《tmux: Productive Mouse-Free Development》中文翻译版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Oh My Zsh 让你愉快地使用 Zsh</title>
      <link>http://oubnpdea.github.io/2015/12/oh-my-zsh/</link>
      <pubDate>Fri, 11 Dec 2015 09:38:22 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/oh-my-zsh/</guid>
      <description>

&lt;p&gt;一提到 Shell 我们程序猿们就会感觉特别亲切，几乎每天的工作都会使用到。&lt;/p&gt;

&lt;p&gt;Shell 在计算机科学中，是指“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中，提供访问内核所提供之服务的程序。Shell也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的层面。因此与之相对的是程序内核，内核不提供和用户的交互功能。（来源：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%AE%BC%E5%B1%A4&#34;&gt;维基百科&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;当然，Shell 也有很多的版本，比如 sh、bash、csh 等等，这里介绍一下 zsh。&lt;/p&gt;

&lt;h5 id=&#34;zsh-具有以下主要功能:61b56cb87ae1650e6c4b000f4a8f6bd8&#34;&gt;Zsh 具有以下主要功能：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项。&lt;/li&gt;
&lt;li&gt;在用户启动的所有shell中共享命令历史。&lt;/li&gt;
&lt;li&gt;通过扩展的文件通配符，可以不利用外部命令达到find命令一般展开文件名。&lt;/li&gt;
&lt;li&gt;改进的变量与数组处理。&lt;/li&gt;
&lt;li&gt;在缓冲区中编辑多行命令。&lt;/li&gt;
&lt;li&gt;多种兼容模式，例如使用/bin/sh运行时可以伪装成Bourne shell。&lt;/li&gt;
&lt;li&gt;可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏。&lt;/li&gt;
&lt;li&gt;可加载的模块，提供其他各种支持：完整的TCP与Unix域套接字控制，FTP客户端与扩充过的数学函数。&lt;/li&gt;
&lt;li&gt;完全可定制化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了上面维基上罗列的功能，还有比如 Tab 显示全目录选择文件以及各种实用插件都会让你喜欢上 Zsh。不过由于本身其过于复杂的配置，让很多人望而却步（比如一开始的我），幸而有了 &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; 帮助我快速使用上 Zsh。&lt;/p&gt;

&lt;h2 id=&#34;安装-zsh:61b56cb87ae1650e6c4b000f4a8f6bd8&#34;&gt;安装 Zsh&lt;/h2&gt;

&lt;p&gt;首先你可以查看一下，现在机器支持的 Shell 有哪些。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  /Users/BPCoder &amp;gt; cat /etc/shells
# List of acceptable shells for chpass(1).
# Ftpd will not allow users to connect who are not using
# one of these shells.

/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OS X 用户基本不用考虑安装 Zsh 的事情，因为默认安装了。其他系统也很简单，只需要通过自己的软件包管理器就可以安装了。最后将默认 Shell 切换成 zsh 即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  /Users/BPCoder &amp;gt; chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装-oh-my-zsh:61b56cb87ae1650e6c4b000f4a8f6bd8&#34;&gt;安装 Oh My Zsh&lt;/h2&gt;

&lt;p&gt;curl 方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh -c &amp;quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;wget 方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh -c &amp;quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就安装完成了，重新开启一个窗口就会发现变化了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/oh-my-zsh-1.jpg&#34; alt=&#34;zsh 界面&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;配置-zsh:61b56cb87ae1650e6c4b000f4a8f6bd8&#34;&gt;配置 Zsh&lt;/h2&gt;

&lt;p&gt;基本已经安装完成，剩下就是根据个人喜好进行一下自定义配置。使用 Zsh 后，配置文件就是当前用户根目录下的 .zshrc 文件。&lt;/p&gt;

&lt;p&gt;下面是我自己的简易配置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export ZSH=/Users/BPCoder/.oh-my-zsh
ZSH_THEME=&amp;quot;robbyrussell&amp;quot;
plugins=(git autojump)
source $ZSH/oh-my-zsh.sh
alias -s ll=&amp;quot;ls -al&amp;quot;
alias -s php=vim
alias -s go=vim
alias -s py=vim
alias -s c=vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单说明一下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ZSH_THEME 是主题的设置， oh my zsh 提供了很多主题，可根据个人的需求选择甚至自己编写主题，我现在的是 robbyrussell，并做了一些简单的修改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local ret_status=&amp;quot;%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ %s)&amp;quot;
PROMPT=&#39;${ret_status}%{$fg_bold[green]%}%p %{$fg[cyan]%}%d %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%}% %{$reset_color%}&amp;gt; &#39;


ZSH_THEME_GIT_PROMPT_PREFIX=&amp;quot;git:(%{$fg[red]%}&amp;quot;
ZSH_THEME_GIT_PROMPT_SUFFIX=&amp;quot;%{$reset_color%}&amp;quot;
ZSH_THEME_GIT_PROMPT_DIRTY=&amp;quot;%{$fg[blue]%}) %{$fg[yellow]%}✗%{$reset_color%}&amp;quot;
ZSH_THEME_GIT_PROMPT_CLEAN=&amp;quot;%{$fg[blue]%})&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;插件方面 oh my zsh 也提供了大量的插件，我这里只是简单添加了两个 git 和 &lt;a href=&#34;http://oubnpdea.github.io/2015/12/autojump/&#34;&gt;autojump&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然后就是&amp;rdquo;alias -s php=vim&amp;rdquo;，表示为在命令行直接输入后缀为 php 的文件名，会用 vim 打开，很实用推荐。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;剩下的其他没有提到的功能，后面会慢慢找时间补充，不过现在已经可以体验到 Zsh 给我们带来的乐趣了。&lt;/p&gt;

&lt;h2 id=&#34;参考资料:61b56cb87ae1650e6c4b000f4a8f6bd8&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/mactalk/19556676&#34;&gt;终极 Shell——ZSH&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://zsh.sourceforge.net/Doc/zsh_a4.pdf&#34;&gt;Zsh 手册&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>autojump 极速直达目录神器</title>
      <link>http://oubnpdea.github.io/2015/12/autojump/</link>
      <pubDate>Thu, 10 Dec 2015 00:12:32 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/autojump/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;autojump&lt;/a&gt; 是一个可以极速直达目标目录的一个神器，解决了使用 cd 频繁切换不同目录的麻烦问题。autojump 通过监控你经常使用命令行使用的路径，对其进行记录。这样之后使用 autojump 命令时就可以通过目录名甚至目录的几个关键字母就可以直达目标目录。当然在你使用 autojump 之前，那个目录一定是你之前访问过的才行。&lt;/p&gt;

&lt;h2 id=&#34;安装-autojump:def4fa5bb9fcf5feb4728723ed352e3f&#34;&gt;安装 autojump&lt;/h2&gt;

&lt;p&gt;还是以 OS X 为例，其他系统可参考&lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;官方 README&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install autojump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你使用的是 zsh 的话，在 .zshrc 中插件配置添加 autojump，就可以使用 j 这个缩写命令替换 autojump，更加提高工作效率。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins=(autojump)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后就可以尝试看看神器的威力了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  /Users/BPCoder &amp;gt; j desk
/Users/BPCoder/Desktop
➜  /Users/BPCoder/Desktop &amp;gt; j hugo
/Users/BPCoder/git/MingYangCoder-hugo
➜  /Users/BPCoder/git/MingYangCoder-hugo git:(master) ✗&amp;gt; j golang
/Users/BPCoder/golang
➜  /Users/BPCoder/golang &amp;gt; j des
/Users/BPCoder/Desktop
➜  /Users/BPCoder/Desktop &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ApiDoc 一个针对 API 项目的文档生成工具</title>
      <link>http://oubnpdea.github.io/2015/12/apidocjs/</link>
      <pubDate>Wed, 09 Dec 2015 01:24:58 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/apidocjs/</guid>
      <description>

&lt;p&gt;对于开发 API 项目的开发人员，有一个好的 API 项目的文档生成工具特别重要，这样可以脱离繁重的编写文档的工作，也可以在修改代码的同时同步文档更新。而且好的文档生成工具也会让使用的人赏心悦目。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://apidocjs.com/&#34;&gt;ApiDoc&lt;/a&gt; 就是最近我开发工作中选用的一个不错的文档生成工具，废话不多说看看效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/apidocjs.jpg&#34; alt=&#34;apiDoc 效果图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ApiDoc 是一个由 Node.js 编写的文档生成工具，支持 C#、Go、Dart、Java、JavaScript、PHP、CoffeeScript、Erlang、Perl、Python、Ruby 等等几乎大多数语言。它的生成逻辑主要依赖于代码注释，通过规定方式的代码注释就生成指定的文档。&lt;/p&gt;

&lt;h2 id=&#34;安装:f86f8637bb41945470993d41b705cd84&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;安装仅依赖 npm，只要 npm 安装好了，一切都很简单。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install apidoc -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;生成:f86f8637bb41945470993d41b705cd84&#34;&gt;生成&lt;/h2&gt;

&lt;p&gt;仅需要创建一个 apidoc 目录用于存放生成的文档文件，简易默认生成方式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apidoc -i your-project-dir/ -o apidoc/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;apidoc 工具会遍历项目目录中所有的文件，通过你写的注释生成指定的文档。&lt;/p&gt;

&lt;h2 id=&#34;注释规范:f86f8637bb41945470993d41b705cd84&#34;&gt;注释规范&lt;/h2&gt;

&lt;p&gt;针对 C#、Go、Dart、Java、JavaScript、PHP 的注释规范：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * @api {get} /user/:id Request User information
 * @apiName GetUser
 * @apiGroup User
 *
 * @apiParam {Number} id Users unique ID.
 *
 * @apiSuccess {String} firstname Firstname of the User.
 * @apiSuccess {String} lastname  Lastname of the User.
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;针对 Python 的注释规范：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
@api {get} /user/:id Request User information
@apiName GetUser
@apiGroup User

@apiParam {Number} id Users unique ID.

@apiSuccess {String} firstname Firstname of the User.
@apiSuccess {String} lastname  Lastname of the User.
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;针对 Ruby 的注释规范：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=begin
@api {get} /user/:id Request User information
@apiName GetUser
@apiGroup User

@apiParam {Number} id Users unique ID.

@apiSuccess {String} firstname Firstname of the User.
@apiSuccess {String} lastname  Lastname of the User.
=end 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样基本上 ApiDoc 的基本使用就结束，使用很简单。当然它也提供了很多高级功能，比如可自定义模板、更多的注释参数等，高级使用可以查询 &lt;a href=&#34;http://apidocjs.com/&#34;&gt;官网&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solarized 配色方案的安装与配置</title>
      <link>http://oubnpdea.github.io/2015/12/vim-colors-solarized/</link>
      <pubDate>Tue, 08 Dec 2015 09:57:47 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/vim-colors-solarized/</guid>
      <description>

&lt;p&gt;对于平时长期面对 iTerm2 和惯用 Vim 的程序猿来说，有一个自己喜欢的配色方案对于工作开发是至关重要的（个人感觉有技能加成）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/altercation/solarized&#34;&gt;Solarized&lt;/a&gt; 是我个人比较喜欢的配色方案，本文就是介绍一下它的安装与配置。&lt;/p&gt;

&lt;h2 id=&#34;iterm2-导入配色方案:ee9df6f92662d30baba6d424068efb93&#34;&gt;iTerm2 导入配色方案&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:altercation/solarized.git
$ cd solarized/iterm2-colors-solarized
$ tree -L 1
.
├── README.md
├── Solarized\ Dark.itermcolors
└── Solarized\ Light.itermcolors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 即可将两个配置文件导入到 iTerm2 中，并在 Preferences 中配置选用。&lt;/p&gt;

&lt;h2 id=&#34;vim-配置:ee9df6f92662d30baba6d424068efb93&#34;&gt;Vim 配置&lt;/h2&gt;

&lt;p&gt;Vim 也使用 Solarized 配色方案，可以使用 &lt;a href=&#34;http://oubnpdea.github.io/2015/12/vim-vundle/&#34;&gt;Vundle&lt;/a&gt; 来管理安装，并在 .vimrc 中添加启用配置即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot; solarized
syntax enable
set background=dark
colorscheme solarized
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置安装很简单，这样你就拥有了 Solarized 的配色方案。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim 的插件管理工具 Vundle</title>
      <link>http://oubnpdea.github.io/2015/12/vim-vundle/</link>
      <pubDate>Mon, 07 Dec 2015 12:40:46 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/vim-vundle/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt; 的名字来源于 &lt;a href=&#34;https://github.com/vim/vim&#34;&gt;Vim&lt;/a&gt; bundle，它是 Vim 的插件管理器。&lt;/p&gt;

&lt;p&gt;Vundle 提供了以下功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在 .vimrc 中记录并配置你的插件&lt;/li&gt;
&lt;li&gt;安装配置的插件&lt;/li&gt;
&lt;li&gt;更新配置的插件&lt;/li&gt;
&lt;li&gt;通过名字搜索所有可获取的 Vim 插件&lt;/li&gt;
&lt;li&gt;清理所有不使用的插件&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装-vundle:8bbac7d00c4aae1de2b1a31a3f377af9&#34;&gt;安装 Vundle&lt;/h2&gt;

&lt;p&gt;安装环境需要 Git 与 Curl 的支持即可，安装仅需从官方 Git 上 Clone 下来即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后配置一下 .vimrc 使用 Vundle ，添加和删除对应的插件就好了。&lt;/p&gt;

&lt;p&gt;官方 .vimrc 的配置 Demo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set nocompatible              &amp;quot; be iMproved, required
filetype off                  &amp;quot; required

&amp;quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
&amp;quot; alternatively, pass a path where Vundle should install plugins
&amp;quot;call vundle#begin(&#39;~/some/path/here&#39;)

&amp;quot; let Vundle manage Vundle, required
Plugin &#39;VundleVim/Vundle.vim&#39;

&amp;quot; The following are examples of different formats supported.
&amp;quot; Keep Plugin commands between vundle#begin/end.
&amp;quot; plugin on GitHub repo
Plugin &#39;tpope/vim-fugitive&#39;
&amp;quot; plugin from http://vim-scripts.org/vim/scripts.html
Plugin &#39;L9&#39;
&amp;quot; Git plugin not hosted on GitHub
Plugin &#39;git://git.wincent.com/command-t.git&#39;
&amp;quot; git repos on your local machine (i.e. when working on your own plugin)
Plugin &#39;file:///home/gmarik/path/to/plugin&#39;
&amp;quot; The sparkup vim script is in a subdirectory of this repo called vim.
&amp;quot; Pass the path to set the runtimepath properly.
Plugin &#39;rstacruz/sparkup&#39;, {&#39;rtp&#39;: &#39;vim/&#39;}
&amp;quot; Avoid a name conflict with L9
Plugin &#39;user/L9&#39;, {&#39;name&#39;: &#39;newL9&#39;}

&amp;quot; All of your Plugins must be added before the following line
call vundle#end()            &amp;quot; required
filetype plugin indent on    &amp;quot; required
&amp;quot; To ignore plugin indent changes, instead use:
&amp;quot;filetype plugin on
&amp;quot;
&amp;quot; Brief help
&amp;quot; :PluginList       - lists configured plugins
&amp;quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
&amp;quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache
&amp;quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
&amp;quot;
&amp;quot; see :h vundle for more details or wiki for FAQ
&amp;quot; Put your non-Plugin stuff after this line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;个人自定义的 .vimrc （后续会进一步完善的）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set nocompatible
filetype on

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin &#39;VundleVim/Vundle.vim&#39;
Plugin &#39;altercation/vim-colors-solarized&#39;
Plugin &#39;Shougo/neocomplcache.vim&#39;
Plugin &#39;scrooloose/nerdtree&#39;
Plugin &#39;majutsushi/tagbar&#39;
Plugin &#39;yegappan/grep&#39;
Plugin &#39;Lokaltog/vim-powerline&#39;
Plugin &#39;yonchu/accelerated-smooth-scroll&#39;

call vundle#end()
filetype plugin indent on

&amp;quot; solarized
syntax enable
set background=dark
colorscheme solarized

&amp;quot; Shougo/neocomplcache.vim
let g:neocomplcache_enable_at_startup = 1

&amp;quot; nerdtree
map &amp;lt;F2&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;

&amp;quot; tagbar
nmap &amp;lt;F3&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;

&amp;quot; grep
nnoremap &amp;lt;silent&amp;gt; &amp;lt;F4&amp;gt; :Rgrep&amp;lt;CR&amp;gt;

&amp;quot; powerline
let g:Powerline_colorscheme=&#39;solarized256&#39;

set nu
set expandtab               &amp;quot;以下三个配置配合使用，设置tab和缩进空格数
set shiftwidth=4
set tabstop=4
set cursorline              &amp;quot;为光标所在行加下划线
set autoread                &amp;quot;文件在Vim之外修改过，自动重新读入
set ignorecase              &amp;quot;检索时忽略大小写
set fileencodings=utf-8,gbk &amp;quot;使用utf-8或gbk打开文件
set hls                     &amp;quot;检索时高亮显示匹配项
set ruler                   &amp;quot;显示光标当前位置
set laststatus=2            &amp;quot;总是显示状态栏
&amp;quot; set nowrap                  &amp;quot;禁止折行
set backspace=indent,eol,start

&amp;quot; 恢复文件关闭之前光标的位置
if has(&amp;quot;autocmd&amp;quot;)
au BufReadPost * if line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;gt; 1 &amp;amp;&amp;amp; line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;lt;= line(&amp;quot;$&amp;quot;) | exe &amp;quot;normal! g&#39;\&amp;quot;&amp;quot; | endif
endif

nmap &amp;lt;C-N&amp;gt; :tabnext&amp;lt;CR&amp;gt;
nmap &amp;lt;C-P&amp;gt; :tabprevious&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在 Vim 中执行 :PluginInstall 即可安装。（安装完成后 :qall 退出）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/vim-vundle.jpg&#34; alt=&#34;安装界面&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;补充部分:8bbac7d00c4aae1de2b1a31a3f377af9&#34;&gt;补充部分&lt;/h2&gt;

&lt;p&gt;&lt;font style=&#34;font-weight: 700;text-decoration: none;color: #e74c3c;&#34;&gt;（2015-12-08 更新）&lt;/font&gt;上面个人自定义配置中使用了 Solarized 的配色插件，想了解 Solarized 的安装配置可查看 &lt;a href=&#34;http://oubnpdea.github.io/2015/12/vim-colors-solarized/&#34;&gt;Solarized 配色方案的安装与配置&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Atom 酷炫插件 activate-power-mode</title>
      <link>http://oubnpdea.github.io/2015/12/atom-activate-power-mode/</link>
      <pubDate>Sun, 06 Dec 2015 14:51:58 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/atom-activate-power-mode/</guid>
      <description>

&lt;p&gt;前几天微博朋友圈一下子被一个 Atom 插件霸屏了。那几天特别忙就没空玩，今天闲下来翻微博突然又看到了，感觉配置一个自己玩玩看。&lt;/p&gt;

&lt;p&gt;没错，不喜欢瞎玩的逗逼不是好程序员。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; 是由 GitHub 开发的自由及开放源代码的文字与代码编辑器，支持OS X、Windows和Linux操作系统，支持 Node.js 所写的插件，并内置Git版本控制系统。多数的延伸包皆为开放源代码授权，并由社区建置与维护。Atom 基于 Chromium 并使用 CoffeeScript 撰写。Atom 也可当作IDE使用。自2014年5月6日起，Atom 的核心程序、包管理器、以及 Atom 基于 Chromium 的桌面程序框架皆使用 MIT 授权条款发布。 （来源：&lt;a href=&#34;https://zh.wikipedia.org/wiki/Atom&#34;&gt;维基百科&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;安装-atom:27ca9704c06c4ce672db41ca97ca47f4&#34;&gt;安装 Atom&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&#34;https://atom.io/&#34;&gt;官网&lt;/a&gt;下载对应系统版本的软件包，安装很简单。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/material-design-theme-for-hugo-1.jpg&#34; alt=&#34;Atom Welcome 界面&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;os-x-上安装-activate-power-mode-插件:27ca9704c06c4ce672db41ca97ca47f4&#34;&gt;OS X 上安装 activate-power-mode 插件&lt;/h2&gt;

&lt;p&gt;插件源码在 GitHub 上可以获取 &lt;a href=&#34;https://github.com/JoelBesada/activate-power-mode&#34;&gt;activate-power-mode&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;而安装过程很简单，在 Preferences 的 Install 上搜索 activate-power-mode 安装即可，然后仅需要使用 ctrl+alt+o 即可手动启动。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/material-design-theme-for-hugo-2.gif&#34; alt=&#34;activate-power-mode 效果&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;简单使用体验:27ca9704c06c4ce672db41ca97ca47f4&#34;&gt;简单使用体验&lt;/h2&gt;

&lt;p&gt;在简单使用上，感觉 Atom 很棒的就是插件很丰富，安装简单方便，比较适合 Web 程序员使用。感觉和 Sublime 比较相似，不过 Atom 是由于 GitHub 牵头开发的开源项目，爱屋及乌先入为主的认为 Atom 后面的发展一定不会让我们失望的。&lt;/p&gt;

&lt;h6 id=&#34;atom-对于-markdown-的支持:27ca9704c06c4ce672db41ca97ca47f4&#34;&gt;Atom 对于 Markdown 的支持&lt;/h6&gt;

&lt;p&gt;支持对于 Markdown 的实时编辑预览功能，需要 shift+control+m 进行开启和关闭。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/material-design-theme-for-hugo-3.jpg&#34; alt=&#34;Atom Markdown 效果&#34; /&gt;&lt;/p&gt;

&lt;h6 id=&#34;atom-一些常规快捷键:27ca9704c06c4ce672db41ca97ca47f4&#34;&gt;Atom 一些常规快捷键&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;command + \ 隐藏/显示文件目录&lt;/li&gt;
&lt;li&gt;command + o 打开文件/文件夹&lt;/li&gt;
&lt;li&gt;command +w 关闭文件&lt;/li&gt;
&lt;li&gt;command + L 选择一整行&lt;/li&gt;
&lt;li&gt;command + enter 光标任意位置也可以直接创建下一行&lt;/li&gt;
&lt;li&gt;command + shift + [ 向左切换文件&lt;/li&gt;
&lt;li&gt;command + shift + ] 向右切换文件&lt;/li&gt;
&lt;li&gt;command + &amp;lsquo;number&amp;rsquo; 比如command + 1切换到对应文件&lt;/li&gt;
&lt;li&gt;command + shift +p 弹出包搜索框&lt;/li&gt;
&lt;li&gt;command + k + ↑ 向上分屏&lt;/li&gt;
&lt;li&gt;command + k + ↓ 向下分屏&lt;/li&gt;
&lt;li&gt;command + k + ← 向左分屏&lt;/li&gt;
&lt;li&gt;command + k + → 向右分屏&lt;/li&gt;
&lt;li&gt;command + b 在打开的文件中查找文件&lt;/li&gt;
&lt;li&gt;command + p 在项目中查找文件&lt;/li&gt;
&lt;li&gt;command + f 在当前文件中查找&lt;/li&gt;
&lt;li&gt;command + g 查找下一个&lt;/li&gt;
&lt;li&gt;command + shift + g 查找上一个&lt;/li&gt;
&lt;li&gt;command + shift + f 在整个项目中查找&lt;/li&gt;
&lt;li&gt;esc 退出查找界面&lt;/li&gt;
&lt;li&gt;command + d 选择词&lt;/li&gt;
&lt;li&gt;command + ↑ 跳到文件顶部&lt;/li&gt;
&lt;li&gt;command + ↓ 跳到文件底部&lt;/li&gt;
&lt;li&gt;command + ← 跳到行首&lt;/li&gt;
&lt;li&gt;command + → 跳到行尾&lt;/li&gt;
&lt;li&gt;command + shift + ↑ 向上选择所有&lt;/li&gt;
&lt;li&gt;shift + ↑ 向上选择一行&lt;/li&gt;
&lt;li&gt;option/alt + → 光标按词向后跳 加上shift就是选择&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;atom-插件:27ca9704c06c4ce672db41ca97ca47f4&#34;&gt;Atom 插件&lt;/h6&gt;

&lt;p&gt;在插件方面有很多，也有很多 Git 相结合的插件很棒，时间比较短玩的不多，后面玩的多了再补充个人体验吧。不过，我还是一个信仰坚定的 Vimer！科科！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>