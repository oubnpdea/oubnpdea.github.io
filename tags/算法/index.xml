<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 345345345 Blog</title>
    <link>http://oubnpdea.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 345345345 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>345345345345@163.com (345345 345345345)</managingEditor>
    <webMaster>345345345345@163.com (345345 345345345)</webMaster>
    <lastBuildDate>Sat, 12 Dec 2015 23:58:39 +0800</lastBuildDate>
    <atom:link href="http://oubnpdea.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>插入排序 Insertion Sort（Go 实现）</title>
      <link>http://oubnpdea.github.io/2015/12/insertion-sort/</link>
      <pubDate>Sat, 12 Dec 2015 23:58:39 +0800</pubDate>
      <author>345345345345@163.com (345345 345345345)</author>
      <guid>http://oubnpdea.github.io/2015/12/insertion-sort/</guid>
      <description>&lt;p&gt;插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。（来源：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&#34;&gt;维基百科&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;它的具体原理类似于现实场景中的排序扑克牌。
即从第二个元素开始与前一个元素（即第一个元素）开始比较，如果第二个小于第一个则第一个元素位置向后退一个位（即第二个元素位置），第二个元素占到第一个元素位置，这样第一个元素与第二个元素就排序完成；之后以此类推，第三个元素与前一个元素进行比较&amp;hellip;..直到最后一个元素排序完成。&lt;/p&gt;

&lt;p&gt;具体逻辑如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xp22y.com1.z0.glb.clouddn.com/insertion-sort-1.jpg&#34; alt=&#34;实例1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go 实现代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func insertionSort(num []int) []int {
    if len(num) &amp;lt;= 1 {
        return num
    }

    for i := 1; i &amp;lt; len(num); i++ {
        tmp := num[i]
        j := i - 1

        for j &amp;gt; -1 &amp;amp;&amp;amp; num[j] &amp;gt; tmp {
            num[j+1] = num[j]
            j--
        }
        num[j+1] = tmp
    }
    return num
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>