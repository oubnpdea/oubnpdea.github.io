<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oubnpdea Blog</title>
    <link>http://oubnpdea.github.io/</link>
    <description>Recent content on oubnpdea Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>345345345345@163.com (oubnpdea)</managingEditor>
    <webMaster>345345345345@163.com (oubnpdea)</webMaster>
    <lastBuildDate>Sat, 12 Mar 2016 19:20:41 +0000</lastBuildDate>
    <atom:link href="http://oubnpdea.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>利用Hugo搭建博客系统</title>
      <link>http://oubnpdea.github.io/2016/03/hugo-install-blog/</link>
      <pubDate>Sat, 12 Mar 2016 19:20:41 +0000</pubDate>
      <author>345345345345@163.com (oubnpdea)</author>
      <guid>http://oubnpdea.github.io/2016/03/hugo-install-blog/</guid>
      <description>&lt;p&gt;(来源：苦X工程师，&lt;a href=&#34;http://kevensya.github.io/post/hugo-install/&#34;&gt;原文链接&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;选择的两种静态网页博客系统比较&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Octopress&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Octopress 是一款基于Jekyll 的静态站点生成系统,使用ruby编写的，使用这个博客系统需要对ruby语言有一定的掌握。因为自己也学习过ruby，而且现在有个朋友正在使用octopress 2.x作为他的博客系统，所以这次的首选是octopress，但是安装过程稍显复杂，目前octopress 3.x版本的安装相关说明基本上没有，加上很多人抱怨octopress的在post数量超过一定数量后，每次生成页面的速度很慢，综合考虑后放弃octopress。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;利用Go语言编写的静态站点生成系统，从速度上来说Hugo完胜，网上对octopress的速度很多人不满，150个post的情况下，octopress生成网页的速度大概需要40秒，而hugo不到一秒就完成页面的生成了，因此也有不少人从octopress换到Hugo，与其到时候更换，还不如从刚开始就选择Hugo，所以最终决定使用Hogo。目前来说只有一个post的情况下，速度方面有多少优势目前还不得知，但是目前来说，速度，发布方式各个方面还是比较满意。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Hugo的安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;安装环境&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OS: OS X Yosemite 10.10.4&lt;br /&gt;
Ruby: ruby 2.2.2p95&lt;br /&gt;
Homebrew: 0.9.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为已经安装过Homebrew了，所以最简单的办法就是利用Homebrew安装&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果未安装过Homebrew，可以按照&lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew官网&lt;/a&gt;的指示进行安装(注意：安装Homebrew之前需要安装&lt;a href=&#34;https://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;brew install Hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有安装过Homebrew，不想折腾安装Homebrew，可以直接从&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;下载最新的binary版本。&lt;/p&gt;

&lt;p&gt;安装后，执行下面的命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果命令能够正确执行并输出安装的hugo版本表示安装成功，接着就可以利用Hugo生成site。&lt;br /&gt;
&lt;strong&gt;博客site的生成&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;生成site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令的目的在path生成site的scaffolding，生成的的文件结构如下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;|- archetypes&lt;br /&gt;
|- content&lt;br /&gt;
|- data&lt;br /&gt;
|- layouts&lt;br /&gt;
|- static&lt;br /&gt;
|- config.toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进入path目录，接下来，安装主题(themes)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个将从github下载所有的Hugo主题，大小大概有230M左右，下载完成需要等待一段时间。 themes下载完后，修改config.toml的配置&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;baseUrl= &amp;ldquo;&lt;a href=&#34;http://kevensya.github.io/&amp;quot;&#34;&gt;http://kevensya.github.io/&amp;quot;&lt;/a&gt; &amp;ndash; 发布时的博客url&lt;br /&gt;
languageCode = &amp;ldquo;zh-cn&amp;rdquo; &amp;ndash; 语言（目前还没有发现有什么特殊的作用）&lt;br /&gt;
title = &amp;ldquo;苦X工程师&amp;rdquo; &amp;ndash; 博客标题&lt;br /&gt;
theme = &amp;ldquo;greyshade&amp;rdquo; &amp;ndash; 主题名&lt;br /&gt;
Paginate = 10 &amp;ndash; 分页大小&lt;/p&gt;

&lt;p&gt;[author]&lt;br /&gt;
name = &amp;ldquo;kevenxia&amp;rdquo;&lt;br /&gt;
email = &amp;ldquo;xxxx@mail.com&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[params]&lt;br /&gt;
  githubName = &amp;ldquo;kevensya&amp;rdquo;&lt;br /&gt;
  description = &amp;ldquo;Java,VC++,C++,ObjC,C#使用中&amp;rdquo; &amp;ndash; 博客的描述&lt;br /&gt;
  disqusShortname = &amp;ldquo;crazykeven&amp;rdquo;&lt;br /&gt;
  github_user = &amp;ldquo;kevensya&amp;rdquo;&lt;br /&gt;
  excerpt_link = &amp;ldquo;[阅读全文]&amp;rdquo; &amp;ndash; 博客首页显示博客概要时代替Read More的文本&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每个主题的配置方法都稍微有些不一样，需要研究主题的layout以及官方关于&lt;a href=&#34;http://gohugo.io/templates/overview/&#34;&gt;Template的说明&lt;/a&gt;进行配置，我这里使用的是&lt;a href=&#34;https://github.com/cxfksword/greyshade&#34;&gt;greyshade主题&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;配置好后，可以生成一个post测试一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/welcome.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入content/目录，多了一个post目录，post目录下多了一个welcome.md文件。&lt;/p&gt;

&lt;p&gt;启动本地预览服务器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里加上了-w option，这样编写的博客或者layout有变化后能实时反映到web页面上，不用每次重新启动服务器（但是修改了config.toml文件就必须重新启动服务器后修改才能得到反映）。&lt;/p&gt;

&lt;p&gt;在浏览器输入 &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; 就可以看到博客的首页了,首页上显示了刚才生成的welcome的博客。&lt;br /&gt;
&lt;strong&gt;发布到Github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个github账号可以发布一个个人页面的站点（Github pages），我就利用这次这个功能发布hugo生成的静态页面。首先在github建立一个repository，这个repository的名字必须是下面两种格式。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;github账户名.github.com&lt;br /&gt;
github账户名.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://oubnpdea.github.io/img/Create-a-New-Repository.png&#34; alt=&#34;Create-a-New-Repository&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创建repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;创建完repository后，暂时回到本地进行操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t greyshade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;利用主题greyshade生成静态html页面，所有的静态页面都在public/中。&lt;/p&gt;

&lt;p&gt;进入public目录，创建本地git仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将.DS_Store文件添加到忽略列表中（.DS_Store是OSX的系统文件）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;.DS_Store&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行下面的命令将生成的页面添加到git仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add -A
git commit -m &amp;quot;Initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将github仓库添加到本地仓库的远程服务器中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/kevensya/kevensya.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将本地仓库推送到github&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就能通过 kevensya.github.io 来访问博客了，如果博客有更新，可以利用下面的命令再次push到github。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t greyshade
git add -A
git commit -m &amp;quot;Update public files&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参考文档&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo官方文档：&lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;http://gohugo.io/overview/introduction/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo静态网站生成器中文教程：&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;http://nanshu.wang/post/2015-01-31/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>初识 Lua</title>
      <link>http://oubnpdea.github.io/2015/12/acquaintance-lua/</link>
      <pubDate>Thu, 03 Dec 2015 23:46:40 +0800</pubDate>
      <author>345345345345@163.com (oubnpdea)</author>
      <guid>http://oubnpdea.github.io/2015/12/acquaintance-lua/</guid>
      <description>

&lt;p&gt;最近了解 &lt;a href=&#34;http://www.lua.org/&#34;&gt;Lua&lt;/a&gt; 完全是为了学习 &lt;a href=&#34;http://weibo.com/agentzh&#34;&gt;@agentZh&lt;/a&gt; 大神的开源项目 &lt;a href=&#34;https://openresty.org/&#34;&gt;OpenResty&lt;/a&gt;。因为在接触到的一些大型高访问高并发下的 Web 项目后，日益发现 PHP 存在的不足与无力（当然这不能抹杀他带来的开发效率的优势，新的 PHP 7 也有了很显著的性能上的提高）。有幸前段时间参加了 OpenResty 的一次线下活动，学习到了很多公司对于 OpenResty 的应用与实践，发现 OpenResty 就是一个很棒的解决方案。&lt;/p&gt;

&lt;p&gt;OpenResty 是一个基于 Nginx 核心的，拥有大量高质量的第三方模块的全功能 Web 应用服务器。OpenResty 可以让 Web 开发人员使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K+ 并发连接响应的超高性能 Web 应用系统。&lt;/p&gt;

&lt;p&gt;既然是使用 Lua 开发，那就先学习了解 Lua 吧。&lt;/p&gt;

&lt;h2 id=&#34;lua-简介:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 简介&lt;/h2&gt;

&lt;p&gt;Lua 是于 1993 年在巴西里约热内卢天主教大学(Pontifical Catholic University of Rio de Janeiro in Brazil)诞生了一门编程语言，发明者是该校的三位研究人员，他们给这门语言取了个浪漫的名字 —— Lua，在葡萄牙语里代表美丽的月亮。事实证明她没有糟蹋这个优美的单词，Lua语言正如它名字所预示的那样成长为一门简洁、优雅且富有乐趣的语言。&lt;/p&gt;

&lt;p&gt;Lua 从一开始就是作为一门方便嵌入(其它应用程序)并可扩展的轻量级脚本语言来设计的，因此她一直遵从着简单、小巧、可移植、快速的原则，官方实现完全采用ANSI C编写，能以C程序库的形式嵌入到宿主程序中。Lua 的每个版本都保持着开放源码的传统，不过各版采用的许可协议并不相同，自5.0版(最新版是5.1)开始她采用的是著名的MIT许可协议。正由于上述特点，所以Lua在游戏开发、机器人控制、分布式应用、图像处理、生物信息学等各种各样的领域中得到了越来越广泛的应用。其中尤以游戏开发为最，许多著名的游戏，比如 Escape from Monkey Island、World of Warcraft、大话西游，都采用了 Lua 来配合引擎完成数据描述、配置管理和逻辑控制等任务。&lt;/p&gt;

&lt;p&gt;提到 Lua 就不得不提到 LuaJIT，虽然 Lua 已经很高效了，相对于其他很多脚本语言都要快，但仍然不能满足所有人，于是就诞生出了 LuaJIT。LuaJIT 是利用 JIT 编译技术把 Lua 代码编译成本地机器码后交由 CPU 直接执行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://luajit.org/&#34;&gt;LuaJIT&lt;/a&gt; 是采用 C 语言编写的 Lua 解释器。LuaJIT 被设计成全兼容标准 Lua 5.1，因此 LuaJIT 代码的语法和标准的 Lua 语法没有太大的区别（当然一些 Lua 后续的新特性还没有引入）。LuaJIT 却比标准 Lua 快上数十倍，简直就是一个高效版的 Lua。&lt;/p&gt;

&lt;h2 id=&#34;lua-环境搭建:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 环境搭建&lt;/h2&gt;

&lt;p&gt;因为 OpenResty 使用的就是 LuaJIT，所以后续学习 Lua 也是在 LuaJIT 环境下运行。
对于 Mac 用户来说安装简单，只要已经安装了 Homebrew 即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install luajit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他系统的安装可查看&lt;a href=&#34;http://www.lua.org/download.html&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hello-world:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Hello World&lt;/h2&gt;

&lt;p&gt;既然学习新东西，起手一定是 Hello World ！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function main()
    print(&amp;quot;Hello World!&amp;quot;)
end

main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后和所有脚本语言一下执行它查看输出结果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ luajit HelloWorld.lua
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lua-的注释:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 的注释&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单行注释 &amp;ndash;  功能等同于 C++ 中的 //&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多行注释 &amp;ndash;[[  注释的内容  ]]   功能等同于C++中的 /**/&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多行注释 &amp;ndash;[====[   注释和内容  ]====],  也等同于C++中的/**/,   这个主要用于注释的内容里面有像arr[arr2[idx]] 这种文本,  如果使用&amp;ndash;[[  ]] 遇到arr[arr2[idx]]后面的]]注释就结束,这显示与我们的意图不相符合。所以使用&amp;ndash;[===[  ]===] 来注释内容, 就不用担心了, 两边的等号数量要相同, 多少个没有关系。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;lua-基础数据类型:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 基础数据类型&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;nil         空（无效值）
boolean     布尔（true/false）
number      实数（类同 C/C++ 的 double 类型）
string      字符串
table       表（关联数组）
function    函数
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lua-表达式:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 表达式&lt;/h2&gt;

&lt;p&gt;算数运算符和关系运算符，与大多数语言一致，唯一特殊的是 不等于运算的写法为 ~=。&lt;/p&gt;

&lt;h5 id=&#34;逻辑运算符:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;逻辑运算符&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;and     逻辑与
or      逻辑或
not     逻辑非
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lua 中的 and 和 or 不同于大多数语言。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a and b   如果 a 为 nil或false，则返回 a，否则返回 b&lt;/li&gt;
&lt;li&gt;a or b    如果 a 为 nil或false，则返回 b，否则返回 a&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lua-函数:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 函数&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function functionName(args..) 
    ....
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lua 函数的使用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;函数的定义一定要在函数调用前。&lt;/li&gt;
&lt;li&gt;函数的参数为按值传递，唯一例外的是表数据类型，是按址传递。&lt;/li&gt;
&lt;li&gt;函数参数支持变长参数。&lt;/li&gt;
&lt;li&gt;函数支持多个返回值。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;lua-模块:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 模块&lt;/h2&gt;

&lt;p&gt;从Lua5.1版本开始，就对模块和包添加了新的支持，可以使用require和module来定义和使用模块和包。require用于使用模块，module用于创建模块。简单的说，一个模块就是一个程序库，可以通过require来加载。然后便得到了一个全局变量，表示一个table。这个table就像是一个命名空间，其内容就是模块中导出的所有东西，比如函数和常量，一个符合规范的模块还应使require返回这个table。&lt;/p&gt;

&lt;p&gt;使用实例：&lt;/p&gt;

&lt;p&gt;complex.lua 文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local _M = {}   -- 局部变量，模块名称

function _M.new(r, i)
    return {r = r, i = i}
end

_M.i =  _M.new(0, 1)     -- 定义一个table型常量i

function  _M.add(c1, c2)  --复数加法
    return  _M.new(c1.r + c2.r, c1.i + c2.i)
end

function  _M.sub(c1, c2)  --复数减法
    return  _M.new(c1.r - c2.r, c1.i - c2.i)
end

return  _M  -- 返回模块的table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.lua 文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local complex = require &amp;quot;complex&amp;quot;

local com1 = complex.new(0, 1)
local com2 = complex.new(1, 2)

local ans = complex.add(com1, com2)
print(ans.r, ans.i)      --&amp;gt;output  1     3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lua-类库:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 类库&lt;/h2&gt;

&lt;p&gt;Lua 提供丰富的标准库，便于开发使用。&lt;a href=&#34;http://www.lua.org/manual/5.1/&#34;&gt;在线手册&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;lua-文件操作:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;Lua 文件操作&lt;/h2&gt;

&lt;p&gt;Lua I/O库提供两种不同的方式处理文件：隐式文件描述，显式文件描述。&lt;/p&gt;

&lt;h6 id=&#34;隐式文件描述:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;隐式文件描述&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;file = io.input(&amp;quot;test1.txt&amp;quot;)  --使用io.input()函数打开文件

repeat
    line = io.read()      --逐行读取内容，文件结束时返回nil
    if nil == line then
        break
end
print(line)
until (false)

io.close(file)       --关闭文件

--&amp;gt;output
my test file
hello
lua


file = io.open(&amp;quot;test1.txt&amp;quot;, &amp;quot;a+&amp;quot;) --使用io.open()函数，以添加模式打开文件
io.output(file)                    --使用io.output()函数，设置默认输出文件
io.write(&amp;quot;\nhello world&amp;quot;)          --使用io.write()函数，把内容写到文件
io.close(file)
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;显示文件描述:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;显示文件描述&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;file = io.open(&amp;quot;test2.txt&amp;quot;, &amp;quot;r&amp;quot;)  --使用io.open()函数，以只读模式打开文件

for line in file:lines() do          --使用file:lines()函数逐行读取文件
    print(line)
end

file:close()

--&amp;gt;output
my test2
hello lua


file = io.open(&amp;quot;test2.txt&amp;quot;, &amp;quot;a&amp;quot;)  --使用io.open()函数，以添加模式打开文件
file:write(&amp;quot;\nhello world&amp;quot;)       --使用file:open()函数，在文件的最后添加一行内容
file:close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体其他操作文件的函数，查询 &lt;a href=&#34;http://www.lua.org/manual/5.1/&#34;&gt;在线手册&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料:dfd4229f58ff2e8c966ff53c3c616ed8&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gitbook.com/book/moonbingbing/openresty-best-practices&#34;&gt;OpenResty最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>利用 Hugo &amp; GitHub 搭建个人博客静态网站</title>
      <link>http://oubnpdea.github.io/2015/12/hugo-create-blog/</link>
      <pubDate>Tue, 01 Dec 2015 12:55:48 +0800</pubDate>
      <author>345345345345@163.com (oubnpdea)</author>
      <guid>http://oubnpdea.github.io/2015/12/hugo-create-blog/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 是一个多用途的网站框架，准确地说，Hugo 是一个静态网站生成器。这意味它不像是 Wordpress、Ghost 以及 Drupal 那样需要运行在其依赖环境的服务器上，也不需要不断的去维护它。Hugo 可以让我们更加专注于撰写自己喜欢的博客，不会因为复杂的操作管理功能浪费我们更多的时间（没错我就是在黑 Wordpress）。&lt;/p&gt;

&lt;p&gt;Hugo 生成静态网站的速度相对于 Jekyll 以及 Hexo 来说几乎是瞬间即可完成。而生成的静态代码可以安全地托管到任何地方，例如 Heroku，GoDaddy，DreamHost，GitHub Pages，Google Cloud Storage，Amazon S3 and CloudFront, 以及运行良好的 CDN 。&lt;/p&gt;

&lt;p&gt;最 6 的就是 Hugo 拥有一个 watch 的编写调试模式，可以在我们编辑修改文章时，通过检测变更自动完成构建网站并刷新浏览器等操作，实现了实时预览的炒鸡好用的功能。Hugo 是由 Go 编写的静态网站构建工具，使用 MarkDown 作为其文本语法，这等种种优势让我不得不选择 Hugo 作为我的博客网站生成器。&lt;/p&gt;

&lt;h2 id=&#34;安装-hugo:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;安装 Hugo&lt;/h2&gt;

&lt;p&gt;对于 Mac 用户来说安装简单的不行，只要已经安装了 &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; 以及 &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; 即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他的系统的安装可查看&lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;官网&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;选择-github-pages:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;选择 GitHub Pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; 是 GitHub 提供的一个免费的静态站点。（当然其他的也可以，比如国内的 &lt;a href=&#34;https://gitcafe.com/&#34;&gt;GitCafe&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;其中 GitHub Pages 提供两种模式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;个人用户或企业站点 （User or organization site）&lt;/li&gt;
&lt;li&gt;项目站点 （Project site）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于我们使用 GitHub Pages 作为个人博客站点，就是选用第一种模式。而其有几个要求限制：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个 GitHub 用户只能创建一个且项目名称必须为 [your-github-account].github.io&lt;/li&gt;
&lt;li&gt;master 分支内容被用于构建和发布页面&lt;/li&gt;
&lt;li&gt;访问的 URL 为 http://[your-github-account].github.io/&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;结合-github-pages-搭建个人博客静态网站-step-by-step:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;结合 GitHub Pages 搭建个人博客静态网站 Step by Step&lt;/h2&gt;

&lt;h6 id=&#34;1-创建两个-github-仓库:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;1. 创建两个 GitHub 仓库&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Hugo 结构代码的代码仓库       [your-github-account]-hugo&lt;/li&gt;
&lt;li&gt;Hugo 生成静态文件的代码仓库   [your-github-account].github.io&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;2-创建一个-hugo-的新站点项目:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;2. 创建一个 Hugo 的新站点项目&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site [your-github-account]-hugo
$ cd [your-github-account]-hugo
$ git init
$ echo .DS_Store &amp;gt;&amp;gt; .gitignore
$ git remote add origin git@github.com:[your-github-account]/[your-github-account]-hugo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令很简单，用于构建 Hugo 站点项目。&lt;/p&gt;

&lt;h6 id=&#34;3-选择模板:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;3. 选择模板&lt;/h6&gt;

&lt;p&gt;Hugo 提供了一个官方收录的模板列表 &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;hugoThemes&lt;/a&gt;，从中选择你喜欢的一个作为你的模板。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add git@github.com:Zenithar/hugo-theme-crisp.git themes/crisp
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;4-编辑配置信息:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;4. 编辑配置信息&lt;/h6&gt;

&lt;p&gt;针对 Crisp 设置对应配置信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://blog.bpcoder.com/&amp;quot;
languageCode = &amp;quot;zh-cn&amp;quot;
title = &amp;quot;BPCoder&amp;quot;
paginate = 8
theme = &amp;quot;crisp&amp;quot;
[params]
    description = &amp;quot;积累分享，愉快生活&amp;quot;
    email = &amp;quot;mingyangcoder@163.com&amp;quot;
    hostname = &amp;quot;blog.bpcoder.com&amp;quot;
[permalinks]
    post = &amp;quot;/:year/:title/&amp;quot;
    addendum = &amp;quot;/addendum/:year/:title/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;5-新建文章:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;5. 新建文章&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new posts/hugo-create-blog.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑 content/posts/hugo-create-blog.md 的内容即可，使用 MarkDown 语法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-12-01T12:55:48+08:00&amp;quot;
title = &amp;quot;利用 Hugo &amp;amp; GitHub 搭建个人博客静态网站&amp;quot;
tags = [&amp;quot;Hugo&amp;quot;]
+++
......
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;6-实时预览:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;6. 实时预览&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -w
0 draft content
0 future content
1 pages created
3 paginator pages created
1 tags created
0 categories created
in 20 ms
Watching for changes in /Users/BPCoder/git/MingYangCoder-hugo/{data,content,layouts,static,themes}
Serving pages from memory
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个时候根据提示访问 &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; 进行预览。这时修改博客文档包括样式文件均可实时查看，配置文件为特例。&lt;/p&gt;

&lt;h6 id=&#34;7-建立生成静态文件的代码目录:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;7. 建立生成静态文件的代码目录&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ git submodule add git@github.com:[your-github-account]/[your-github-account].github.io.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;8-生成静态站点并发布:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;8. 生成静态站点并发布&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ hugo
$ cd public
$ git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;first post&amp;quot;
$ git push origin master
$ cd ..
$ git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init hugo coder&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是访问你的 http://[your-github-account].github.io/ 站点网址即可查看。&lt;/p&gt;

&lt;h6 id=&#34;9-可选-设置自己域名的站点:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;9. 【可选】设置自己域名的站点&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ cd public
$ echo [your.domain.name] &amp;gt;&amp;gt; CNAME
$ git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;add CNAME file&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后到你的域名管理界面配置对应CNAME记录类型即可&lt;/p&gt;

&lt;h2 id=&#34;补充内容:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;补充内容&lt;/h2&gt;

&lt;p&gt;&lt;font style=&#34;font-weight: 700;text-decoration: none;color: #e74c3c;&#34;&gt;（2015-12-10 更新）&lt;/font&gt;通过一段时间的使用，感觉 GitHub Pages 提供的服务实在不稳定，访问速度也比较慢，特别影响体验。通过了解发现国内的 GitCafe 同样提供 Pages 服务，所以尝试使用一下，发现明显提高不少。可通过&lt;a href=&#34;https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9&#34;&gt;官方文档&lt;/a&gt; 一步一步全新配置。&lt;/p&gt;

&lt;h6 id=&#34;简单整理迁移方案:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;简单整理迁移方案：&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;在 GitCafe 创建与用户名相同的项目，并创建分支 gitcafe-pages 用于发布。&lt;/li&gt;
&lt;li&gt;对现有静态文件的代码目录（public），添加上面新建的 remote。&lt;/li&gt;
&lt;li&gt;然后就是提交时，提交到 gitcafe-pages 分支下即可，这时候访问 http://[your-gitcafe-account].gitcafe.io/ 就可以访问了。&lt;/li&gt;
&lt;li&gt;至于域名设置，GitCafe 比 GitHub 好一些提供一个界面化管理页面，添加支持域名，无需 CNAME 文件。&lt;/li&gt;
&lt;li&gt;最后和 GitHub 设置域名解析的方式一下，在域名管理界面配置对应的 CNAME 记录类型即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;font style=&#34;font-weight: 700;text-decoration: none;color: #e74c3c;&#34;&gt;（2015-12-10 更新）&lt;/font&gt;由于博客内容会存在一些图片或者比较大的js文件，推荐存储在国内&lt;a href=&#34;https://portal.qiniu.com/signup?code=3le4lzknkl2z6&#34;&gt;七牛云存储&lt;/a&gt;上，稳定速度快。&lt;/p&gt;

&lt;p&gt;&lt;font style=&#34;font-weight: 700;text-decoration: none;color: #e74c3c;&#34;&gt;（2015-12-13 更新）&lt;/font&gt;又迁回 GitHub，虽然有时候 GitHub 有点慢，但是贵在稳定啊！经历一次 GitCafe Pages 停止服务的情况，没办法又迁回 GitHub，希望国内能有一个稳定的 Pages 服务。&lt;/p&gt;

&lt;h2 id=&#34;参考资料:c9eed481fd05f69ed1cb75c5891de126&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kaichu.io/2015/07/my-first-post/&#34;&gt;在 Github Pages 建立 Hugo 靜態網站&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;使用hugo搭建个人博客站点&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sa.muel.be/tags/hugo/&#34;&gt;Hugo · Samuel Debruyn&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://oubnpdea.github.io/1/01/hugo-install-blog.md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>345345345345@163.com (oubnpdea)</author>
      <guid>http://oubnpdea.github.io/1/01/hugo-install-blog.md/</guid>
      <description>﻿&lt;!doctype html public &#39;-//W3C//DTD HTML 4.0 Transitional //EN&#39;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;hugo-install-blog&lt;/title&gt;
&lt;meta charset=&#39;UTF-8&#39; /&gt;
&lt;meta name=&#39;generator&#39; content=&#39;EverEdit&#39; /&gt;
&lt;link href=&#39;C:\SoftInsWin7V64\everedit\mode\markdown\default.css&#39; rel=&#39;stylesheet&#39;&gt;&lt;/link&gt;
&lt;link href=&#39;C:\SoftInsWin7V64\everedit\mode\markdown\prettify.css&#39; rel=&#39;stylesheet&#39;&gt;&lt;/link&gt;
&lt;script type=&#39;text/javascript&#39; src=&#39;C:\SoftInsWin7V64\everedit\mode\markdown\prettify.js&#39;&gt;&lt;/script&gt;
&lt;script type=&#39;text/javascript&#39; src=&#39;C:\SoftInsWin7V64\everedit\mode\markdown\jquery-1.10.2.min.js&#39;&gt;&lt;/script&gt;
&lt;script type=&#39;text/javascript&#39; src=&#39;C:\SoftInsWin7V64\everedit\mode\markdown\toc.js&#39;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&#39;generated-toc&#39;&gt;&lt;/div&gt;
&lt;p&gt;+++
date = &#34;2016-03-12T19:20:41&#34;
title = &#34;利用Hugo搭建博客系统&#34;
tags = [&#34;Hugo&#34;]
description = &#34;使用Hugo&amp;amp;GitHub构建个人博客静态网站;Hugo是一个多用途的网站框架;Hugo是一个静态网站生成器;安装Hugo;选择GitHub Pages;结合GitHub Pages搭建个人博客静态网站Step by Step;创建两个GitHub仓库;创建一个Hugo的新站点项目;选择模板;编辑配置信息;新建文章;实时预览;建立生成静态文件的代码目录;生成静态站点并发布;设置自己域名的站点&#34;
+++&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;选择的两种静态网页博客系统比较&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Octopress&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Octopress 是一款基于Jekyll 的静态站点生成系统,使用ruby编写的，使用这个博客系统需要对ruby语言有一定的掌握。因为自己也学习过ruby，而且现在有个朋友正在使用octopress 2.x作为他的博客系统，所以这次的首选是octopress，但是安装过程稍显复杂，目前octopress 3.x版本的安装相关说明基本上没有，加上很多人抱怨octopress的在post数量超过一定数量后，每次生成页面的速度很慢，综合考虑后放弃octopress。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;利用Go语言编写的静态站点生成系统，从速度上来说Hugo完胜，网上对octopress的速度很多人不满，150个post的情况下，octopress生成网页的速度大概需要40秒，而hugo不到一秒就完成页面的生成了，因此也有不少人从octopress换到Hugo，与其到时候更换，还不如从刚开始就选择Hugo，所以最终决定使用Hogo。目前来说只有一个post的情况下，速度方面有多少优势目前还不得知，但是目前来说，速度，发布方式各个方面还是比较满意。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hugo的安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;安装环境&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OS: OS X Yosemite 10.10.4 &lt;br&gt;
  Ruby: ruby 2.2.2p95 &lt;br&gt;
  Homebrew: 0.9.5  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为已经安装过Homebrew了，所以最简单的办法就是利用Homebrew安装&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果未安装过Homebrew，可以按照&lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew官网&lt;/a&gt;的指示进行安装(注意：安装Homebrew之前需要安装&lt;a href=&#34;https://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;brew install Hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有安装过Homebrew，不想折腾安装Homebrew，可以直接从&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;下载最新的binary版本。&lt;/p&gt;

&lt;p&gt;安装后，执行下面的命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果命令能够正确执行并输出安装的hugo版本表示安装成功，接着就可以利用Hugo生成site。 &lt;br&gt;
&lt;strong&gt;博客site的生成&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;生成site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令的目的在path生成site的scaffolding，生成的的文件结构如下&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;|- archetypes &lt;br&gt;
  |- content &lt;br&gt;
  |- data &lt;br&gt;
  |- layouts &lt;br&gt;
  |- static &lt;br&gt;
  |- config.toml  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进入path目录，接下来，安装主题(themes)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个将从github下载所有的Hugo主题，大小大概有230M左右，下载完成需要等待一段时间。 themes下载完后，修改config.toml的配置&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;baseUrl= &#34;&lt;a href=&#34;http://kevensya.github.io/&#34;&gt;http://kevensya.github.io/&lt;/a&gt;&#34; -- 发布时的博客url &lt;br&gt;
  languageCode = &#34;zh-cn&#34; -- 语言（目前还没有发现有什么特殊的作用） &lt;br&gt;
  title = &#34;苦X工程师&#34; -- 博客标题 &lt;br&gt;
  theme = &#34;greyshade&#34; -- 主题名 &lt;br&gt;
  Paginate = 10 -- 分页大小  &lt;/p&gt;
  
  &lt;p&gt;[author] &lt;br&gt;
  name = &#34;kevenxia&#34; &lt;br&gt;
  email = &#34;xxxx@mail.com&#34;  &lt;/p&gt;
  
  &lt;p&gt;[params] &lt;br&gt;
    githubName = &#34;kevensya&#34; &lt;br&gt;
    description = &#34;Java,VC++,C++,ObjC,C#使用中&#34; -- 博客的描述 &lt;br&gt;
    disqusShortname = &#34;crazykeven&#34; &lt;br&gt;
    github_user = &#34;kevensya&#34; &lt;br&gt;
    excerpt_link = &#34;[阅读全文]&#34; -- 博客首页显示博客概要时代替Read More的文本  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每个主题的配置方法都稍微有些不一样，需要研究主题的layout以及官方关于&lt;a href=&#34;http://gohugo.io/templates/overview/&#34;&gt;Template的说明&lt;/a&gt;进行配置，我这里使用的是&lt;a href=&#34;https://github.com/cxfksword/greyshade&#34;&gt;greyshade主题&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;配置好后，可以生成一个post测试一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/welcome.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入content/目录，多了一个post目录，post目录下多了一个welcome.md文件。&lt;/p&gt;

&lt;p&gt;启动本地预览服务器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里加上了-w option，这样编写的博客或者layout有变化后能实时反映到web页面上，不用每次重新启动服务器（但是修改了config.toml文件就必须重新启动服务器后修改才能得到反映）。&lt;/p&gt;

&lt;p&gt;在浏览器输入 &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; 就可以看到博客的首页了,首页上显示了刚才生成的welcome的博客。 &lt;br&gt;
&lt;strong&gt;发布到Github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个github账号可以发布一个个人页面的站点（Github pages），我就利用这次这个功能发布hugo生成的静态页面。首先在github建立一个repository，这个repository的名字必须是下面两种格式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;github账户名.github.com &lt;br&gt;
  github账户名.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://oubnpdea.github.io/img/Create-a-New-Repository.png&#34; alt=&#34;Create-a-New-Repository&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创建repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;创建完repository后，暂时回到本地进行操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t greyshade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;利用主题greyshade生成静态html页面，所有的静态页面都在public/中。&lt;/p&gt;

&lt;p&gt;进入public目录，创建本地git仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将.DS_Store文件添加到忽略列表中（.DS_Store是OSX的系统文件）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#34;.DS_Store&#34; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行下面的命令将生成的页面添加到git仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add -A
git commit -m &#34;Initial commit&#34;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将github仓库添加到本地仓库的远程服务器中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/kevensya/kevensya.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将本地仓库推送到github&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就能通过 kevensya.github.io 来访问博客了，如果博客有更新，可以利用下面的命令再次push到github。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t greyshade
git add -A
git commit -m &#34;Update public files&#34;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参考文档&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hugo官方文档：&lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;http://gohugo.io/overview/introduction/&lt;/a&gt;&lt;/p&gt;
  
  &lt;p&gt;Hugo静态网站生成器中文教程：&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;http://nanshu.wang/post/2015-01-31/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script type=&#39;text/javascript&#39;&gt;
$(document).ready(function(){
  if($(&#39;code&#39;).length&gt;0){
    $(&#39;code&#39;).parent().addClass(&#39;prettyprint linenums&#39;);
    prettyPrint();
};
});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</description>
    </item>
    
    <item>
      <title>Search Results</title>
      <link>http://oubnpdea.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>345345345345@163.com (oubnpdea)</author>
      <guid>http://oubnpdea.github.io/search/</guid>
      <description>&lt;gcse:searchresults-only linktarget=&#34;_parent&#34;&gt;&lt;/gcse:searchresults-only&gt;
&lt;script&gt;
      (function() {
        var cx = &#39;:&#39;;
        var gcse = document.createElement(&#39;script&#39;);
        gcse.type = &#39;text/javascript&#39;;
        gcse.async = true;
        gcse.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) +
            &#39;//cse.google.com/cse.js?cx=&#39; + cx;
        var s = document.getElementsByTagName(&#39;script&#39;)[0];
        s.parentNode.insertBefore(gcse, s);
      })();
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>